     1	import pandas as pd
     2	
     3	class BookLover:
     4	
     5	    def __init__(self, name, email, fav_genre, 
     6	                 num_books=0, book_list=pd.DataFrame({'book_name':[], 'book_rating':[]})):
     7	        self.name = name
     8	        self.email = email
     9	        self.fav_genre = fav_genre
    10	        self.num_books = num_books
    11	        self.book_list = book_list
    12	
    13	    def add_book(self, book_name, rating):
    14	        if book_name not in self.book_list.values:
    15	            new_book = pd.DataFrame({'book_name':[book_name], 
    16	                                     'book_rating': [rating]})
    17	            self.book_list = pd.concat([self.book_list, new_book],
    18	                                        ignore_index=True)
    19	            self.num_books += 1
    20	        else:
    21	            return f"{book_name} is already in the book list for {self.name}"
    22	    
    23	    def has_read(self, book_name):
    24	        if book_name in self.book_list['book_name'].tolist():
    25	            return True
    26	        else:
    27	            return False
    28	    
    29	    def num_books_read(self):
    30	        return self.num_books
    31	    
    32	    def fav_books(self):
    33	        fav_books = self.book_list.loc[self.book_list['book_rating'] > 3]
    34	        return fav_books
    35	         1	from booklover import BookLover
     2	import unittest
     3	
     4	class BookLoverTestSuite(unittest.TestCase):
     5	
     6	    def test_1_add_book(self):
     7	        book_lover1 = BookLover('Hilde', 'ksg8xy@virginia.edu', 'romance')
     8	        book_lover1.add_book('Dune', 5)
     9	        books = book_lover1.book_list['book_name'].tolist()
    10	        actual = 'Dune' in books
    11	        message = "Book was not added successfully"
    12	        self.assertTrue(actual, message)
    13	    
    14	    def test_2_add_book(self):
    15	        book_lover2 = BookLover('Hilde', 'ksg8xy@virginia.edu', 'romance')
    16	        book_lover2.add_book('Dune', 5)
    17	        book_lover2.add_book('Dune', 5)
    18	        books = book_lover2.book_list['book_name'].tolist()
    19	        actual = sum([True for book in books if book == 'Dune'])
    20	        message = "Same book was added more than once."
    21	        self.assertLess(actual, 2)    
    22	    
    23	    def test_3_has_read(self):
    24	        book_lover3 = BookLover('Hilde', 'ksg8xy@virginia.edu', 'romance')
    25	        book_lover3.add_book('Dune', 5)
    26	        books = book_lover3.book_list['book_name'].tolist()
    27	        actual = 'Dune' in books
    28	        message = "Book not found in book list."
    29	        self.assertTrue(actual, message)
    30	
    31	    def test_4_has_read(self):
    32	        book_lover4 = BookLover('Hilde', 'ksg8xy@virginia.edu', 'romance')
    33	        books = book_lover4.book_list['book_name'].tolist()
    34	        actual = 'Dune' in books
    35	        message = "Unread book found in book list."
    36	        self.assertFalse(actual, message)
    37	
    38	    def test_5_num_book_read(self):
    39	        book_lover5 = BookLover('Hilde', 'ksg8xy@virginia.edu', 'romance')
    40	        book_lover5.add_book('Dune', 5)
    41	        book_lover5.add_book('Emma', 5)
    42	        book_lover5.add_book('The Great Gatsby', 5)
    43	        expected = 3
    44	        actual = book_lover5.num_books
    45	        message = "Number of books in list does not match num_books."
    46	        self.assertEqual(expected, actual, message)
    47	    
    48	    def test_6_fav_books(self):
    49	        book_lover6 = BookLover('Hilde', 'ksg8xy@virginia.edu', 'romance')
    50	        book_lover6.add_book('Dune', 5)
    51	        book_lover6.add_book('Emma', 3)
    52	        book_lover6.add_book('The Great Gatsby', 4)
    53	        book_ratings = book_lover6.fav_books()['book_rating'].tolist()
    54	        expected = 2
    55	        actual = sum([True for rating in book_ratings if rating > 3])
    56	        message = "Books in fav_books do not have ratings > 3"
    57	        self.assertEqual(expected, actual)
    58	
    59	if __name__ == '__main__':
    60	    unittest.main(verbosity=3)
    61	
     1	test_1_add_book (__main__.BookLoverTestSuite.test_1_add_book) ... ok
     2	test_2_add_book (__main__.BookLoverTestSuite.test_2_add_book) ... ok
     3	test_3_has_read (__main__.BookLoverTestSuite.test_3_has_read) ... ok
     4	test_4_has_read (__main__.BookLoverTestSuite.test_4_has_read) ... ok
     5	test_5_num_book_read (__main__.BookLoverTestSuite.test_5_num_book_read) ... ok
     6	test_6_fav_books (__main__.BookLoverTestSuite.test_6_fav_books) ... ok
     7	
     8	----------------------------------------------------------------------
     9	Ran 6 tests in 0.004s
    10	
    11	OK
